version: "3.8"

# virtual networks inside cluster, to let runing containers talk to each other
networks:
  nginx-reverse: # root nginx-reverse to ancient-one
  api-db: # ancient-one to mongo and redis

# declare all services: nginx-reverse (ancient-one (redis, mongo))
services:
  # root service: nginx as reverse-proxy for 1) ancient-one
  nginx-reverse:
    image: nginx
    restart: "no"
    deploy:
      placement: # to run this service on a specific node
        constraints:
          - 'node.role == manager'
    ports: # exposed ports out of cluster
      - "80:80"
      # - 443:443 # if you have certs
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro,delegated
      - ./nginx-reverse/nginx.conf:/etc/nginx/conf.d/nginx.conf:ro,delegated
      # - ./nginx-reverse/fullchain.pem:/etc/nginx/certs/fullchain.pem:ro,delegated # if you have certs
      # - ./nginx-reverse/privkey.pem:/etc/nginx/certs/privkey.pem:ro,delegated # if you have certs
    networks:
      - nginx-reverse
    depends_on: # do not start service until dependencies are started
      - ancient-one

  # 1) ancient-one + redis + mongo
  ancient-one:
    image: leosima/ancient-one # specify your repo name
    ports:
      - "3000:3000"
    build: # to build image with docker-compose
      context: ../../
      dockerfile: ./Dockerfile
    restart: "no"
    # deploy: # uncomment to run multiple ancient-one services
    #   replicas: 4
    #   resources:
    #     limits:
    #       cpus: "1.5"
    #       memory: 256M
    environment:
      - MONGO_URL=mongodb://mongo/AcientOne # 'mongo' is a name (hostname) of container
      - REDIS_URL=redis://redis:6379 # 'redis' is a name (hostname) of container
    networks:
      - nginx-reverse
      - api-db
    depends_on: # do not start service until dependencies are started
      - redis
      - mongo

  redis:
    image: redis
    restart: "no"
    ports: # uncomment if you would like to connect from host
      - "6379:6379"
    command: redis-server --save ''
    networks:
      - api-db
  
  mongo:
    image: mongo
    restart: "no"
    deploy:
      placement: # to run this service on a specific node
        constraints:
          - 'node.role == manager'
    ports: # uncomment if you would like to connect from host
      - "27017:27017"
    volumes:
      - /var/lib/my-mongodb-data/:/data/db/
    networks:
      - api-db